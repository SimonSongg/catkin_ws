// Generated by gencpp from file gpspub/adv_gpsmsg.msg
// DO NOT EDIT!


#ifndef GPSPUB_MESSAGE_ADV_GPSMSG_H
#define GPSPUB_MESSAGE_ADV_GPSMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gpspub
{
template <class ContainerAllocator>
struct adv_gpsmsg_
{
  typedef adv_gpsmsg_<ContainerAllocator> Type;

  adv_gpsmsg_()
    : Flag(0)
    , Latitude(0.0)
    , Longitude(0.0)
    , Accuracy(0.0)
    , Speed(0.0)  {
    }
  adv_gpsmsg_(const ContainerAllocator& _alloc)
    : Flag(0)
    , Latitude(0.0)
    , Longitude(0.0)
    , Accuracy(0.0)
    , Speed(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _Flag_type;
  _Flag_type Flag;

   typedef float _Latitude_type;
  _Latitude_type Latitude;

   typedef float _Longitude_type;
  _Longitude_type Longitude;

   typedef float _Accuracy_type;
  _Accuracy_type Accuracy;

   typedef float _Speed_type;
  _Speed_type Speed;





  typedef boost::shared_ptr< ::gpspub::adv_gpsmsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gpspub::adv_gpsmsg_<ContainerAllocator> const> ConstPtr;

}; // struct adv_gpsmsg_

typedef ::gpspub::adv_gpsmsg_<std::allocator<void> > adv_gpsmsg;

typedef boost::shared_ptr< ::gpspub::adv_gpsmsg > adv_gpsmsgPtr;
typedef boost::shared_ptr< ::gpspub::adv_gpsmsg const> adv_gpsmsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gpspub::adv_gpsmsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gpspub::adv_gpsmsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gpspub::adv_gpsmsg_<ContainerAllocator1> & lhs, const ::gpspub::adv_gpsmsg_<ContainerAllocator2> & rhs)
{
  return lhs.Flag == rhs.Flag &&
    lhs.Latitude == rhs.Latitude &&
    lhs.Longitude == rhs.Longitude &&
    lhs.Accuracy == rhs.Accuracy &&
    lhs.Speed == rhs.Speed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gpspub::adv_gpsmsg_<ContainerAllocator1> & lhs, const ::gpspub::adv_gpsmsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gpspub

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::gpspub::adv_gpsmsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gpspub::adv_gpsmsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gpspub::adv_gpsmsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gpspub::adv_gpsmsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gpspub::adv_gpsmsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gpspub::adv_gpsmsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gpspub::adv_gpsmsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7044bd9f13e700cf1742e5c8e5794818";
  }

  static const char* value(const ::gpspub::adv_gpsmsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7044bd9f13e700cfULL;
  static const uint64_t static_value2 = 0x1742e5c8e5794818ULL;
};

template<class ContainerAllocator>
struct DataType< ::gpspub::adv_gpsmsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gpspub/adv_gpsmsg";
  }

  static const char* value(const ::gpspub::adv_gpsmsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gpspub::adv_gpsmsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 Flag\n"
"float32 Latitude\n"
"float32 Longitude\n"
"float32 Accuracy\n"
"float32 Speed\n"
;
  }

  static const char* value(const ::gpspub::adv_gpsmsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gpspub::adv_gpsmsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Flag);
      stream.next(m.Latitude);
      stream.next(m.Longitude);
      stream.next(m.Accuracy);
      stream.next(m.Speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct adv_gpsmsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gpspub::adv_gpsmsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gpspub::adv_gpsmsg_<ContainerAllocator>& v)
  {
    s << indent << "Flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Flag);
    s << indent << "Latitude: ";
    Printer<float>::stream(s, indent + "  ", v.Latitude);
    s << indent << "Longitude: ";
    Printer<float>::stream(s, indent + "  ", v.Longitude);
    s << indent << "Accuracy: ";
    Printer<float>::stream(s, indent + "  ", v.Accuracy);
    s << indent << "Speed: ";
    Printer<float>::stream(s, indent + "  ", v.Speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GPSPUB_MESSAGE_ADV_GPSMSG_H
